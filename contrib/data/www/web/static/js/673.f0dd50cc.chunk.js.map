{"version":3,"file":"static/js/673.f0dd50cc.chunk.js","mappings":"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","sources":["../node_modules/esptool-js/lib/targets/esp32.js","../node_modules/esptool-js/lib/targets/esp32p4.js","../node_modules/esptool-js/lib/targets/rom.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nimport ESP32_STUB from \"./stub_flasher/stub_flasher_32.json\";\nexport class ESP32ROM extends ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32\";\n        this.IMAGE_CHIP_ID = 0;\n        this.EFUSE_RD_REG_BASE = 0x3ff5a000;\n        this.DR_REG_SYSCON_BASE = 0x3ff66000;\n        this.UART_CLKDIV_REG = 0x3ff40014;\n        this.UART_CLKDIV_MASK = 0xfffff;\n        this.UART_DATE_REG_ADDR = 0x60000078;\n        this.XTAL_CLK_DIVIDER = 1;\n        this.FLASH_SIZES = {\n            \"1MB\": 0x00,\n            \"2MB\": 0x10,\n            \"4MB\": 0x20,\n            \"8MB\": 0x30,\n            \"16MB\": 0x40,\n        };\n        this.FLASH_WRITE_SIZE = 0x400;\n        this.BOOTLOADER_FLASH_OFFSET = 0x1000;\n        this.SPI_REG_BASE = 0x3ff42000;\n        this.SPI_USR_OFFS = 0x1c;\n        this.SPI_USR1_OFFS = 0x20;\n        this.SPI_USR2_OFFS = 0x24;\n        this.SPI_W0_OFFS = 0x80;\n        this.SPI_MOSI_DLEN_OFFS = 0x28;\n        this.SPI_MISO_DLEN_OFFS = 0x2c;\n        this.TEXT_START = ESP32_STUB.text_start;\n        this.ENTRY = ESP32_STUB.entry;\n        this.DATA_START = ESP32_STUB.data_start;\n        this.ROM_DATA = ESP32_STUB.data;\n        this.ROM_TEXT = ESP32_STUB.text;\n    }\n    async readEfuse(loader, offset) {\n        const addr = this.EFUSE_RD_REG_BASE + 4 * offset;\n        loader.debug(\"Read efuse \" + addr);\n        return await loader.readReg(addr);\n    }\n    async getPkgVersion(loader) {\n        const word3 = await this.readEfuse(loader, 3);\n        let pkgVersion = (word3 >> 9) & 0x07;\n        pkgVersion += ((word3 >> 2) & 0x1) << 3;\n        return pkgVersion;\n    }\n    async getChipRevision(loader) {\n        const word3 = await this.readEfuse(loader, 3);\n        const word5 = await this.readEfuse(loader, 5);\n        const apbCtlDate = await loader.readReg(this.DR_REG_SYSCON_BASE + 0x7c);\n        const revBit0 = (word3 >> 15) & 0x1;\n        const revBit1 = (word5 >> 20) & 0x1;\n        const revBit2 = (apbCtlDate >> 31) & 0x1;\n        if (revBit0 != 0) {\n            if (revBit1 != 0) {\n                if (revBit2 != 0) {\n                    return 3;\n                }\n                else {\n                    return 2;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    async getChipDescription(loader) {\n        const chipDesc = [\n            \"ESP32-D0WDQ6\",\n            \"ESP32-D0WD\",\n            \"ESP32-D2WD\",\n            \"\",\n            \"ESP32-U4WDH\",\n            \"ESP32-PICO-D4\",\n            \"ESP32-PICO-V3-02\",\n        ];\n        let chipName = \"\";\n        const pkgVersion = await this.getPkgVersion(loader);\n        const chipRevision = await this.getChipRevision(loader);\n        const rev3 = chipRevision == 3;\n        const single_core = (await this.readEfuse(loader, 3)) & (1 << 0);\n        if (single_core != 0) {\n            chipDesc[0] = \"ESP32-S0WDQ6\";\n            chipDesc[1] = \"ESP32-S0WD\";\n        }\n        if (rev3) {\n            chipDesc[5] = \"ESP32-PICO-V3\";\n        }\n        if (pkgVersion >= 0 && pkgVersion <= 6) {\n            chipName = chipDesc[pkgVersion];\n        }\n        else {\n            chipName = \"Unknown ESP32\";\n        }\n        if (rev3 && (pkgVersion === 0 || pkgVersion === 1)) {\n            chipName += \"-V3\";\n        }\n        return chipName + \" (revision \" + chipRevision + \")\";\n    }\n    async getChipFeatures(loader) {\n        const features = [\"Wi-Fi\"];\n        const word3 = await this.readEfuse(loader, 3);\n        const chipVerDisBt = word3 & (1 << 1);\n        if (chipVerDisBt === 0) {\n            features.push(\" BT\");\n        }\n        const chipVerDisAppCpu = word3 & (1 << 0);\n        if (chipVerDisAppCpu !== 0) {\n            features.push(\" Single Core\");\n        }\n        else {\n            features.push(\" Dual Core\");\n        }\n        const chipCpuFreqRated = word3 & (1 << 13);\n        if (chipCpuFreqRated !== 0) {\n            const chipCpuFreqLow = word3 & (1 << 12);\n            if (chipCpuFreqLow !== 0) {\n                features.push(\" 160MHz\");\n            }\n            else {\n                features.push(\" 240MHz\");\n            }\n        }\n        const pkgVersion = await this.getPkgVersion(loader);\n        if ([2, 4, 5, 6].indexOf(pkgVersion) !== -1) {\n            features.push(\" Embedded Flash\");\n        }\n        if (pkgVersion === 6) {\n            features.push(\" Embedded PSRAM\");\n        }\n        const word4 = await this.readEfuse(loader, 4);\n        const adcVref = (word4 >> 8) & 0x1f;\n        if (adcVref !== 0) {\n            features.push(\" VRef calibration in efuse\");\n        }\n        const blk3PartRes = (word3 >> 14) & 0x1;\n        if (blk3PartRes !== 0) {\n            features.push(\" BLK3 partially reserved\");\n        }\n        const word6 = await this.readEfuse(loader, 6);\n        const codingScheme = word6 & 0x3;\n        const codingSchemeArr = [\"None\", \"3/4\", \"Repeat (UNSUPPORTED)\", \"Invalid\"];\n        features.push(\" Coding Scheme \" + codingSchemeArr[codingScheme]);\n        return features;\n    }\n    async getCrystalFreq(loader) {\n        const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n        const etsXtal = (loader.transport.baudrate * uartDiv) / 1000000 / this.XTAL_CLK_DIVIDER;\n        let normXtal;\n        if (etsXtal > 33) {\n            normXtal = 40;\n        }\n        else {\n            normXtal = 26;\n        }\n        if (Math.abs(normXtal - etsXtal) > 1) {\n            loader.info(\"WARNING: Unsupported crystal in use\");\n        }\n        return normXtal;\n    }\n    _d2h(d) {\n        const h = (+d).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    async readMac(loader) {\n        let mac0 = await this.readEfuse(loader, 1);\n        mac0 = mac0 >>> 0;\n        let mac1 = await this.readEfuse(loader, 2);\n        mac1 = mac1 >>> 0;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n}\n","import { ESP32ROM } from \"./esp32.js\";\nimport ESP32P4_STUB from \"./stub_flasher/stub_flasher_32p4.json\";\nexport class ESP32P4ROM extends ESP32ROM {\n    constructor() {\n        super(...arguments);\n        this.CHIP_NAME = \"ESP32-P4\";\n        this.IMAGE_CHIP_ID = 18;\n        this.IROM_MAP_START = 0x40000000;\n        this.IROM_MAP_END = 0x4c000000;\n        this.DROM_MAP_START = 0x40000000;\n        this.DROM_MAP_END = 0x4c000000;\n        this.BOOTLOADER_FLASH_OFFSET = 0x2000; // First 2 sectors are reserved for FE purposes\n        this.CHIP_DETECT_MAGIC_VALUE = [0x0, 0x0addbad0];\n        this.UART_DATE_REG_ADDR = 0x500ca000 + 0x8c;\n        this.EFUSE_BASE = 0x5012d000;\n        this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n        this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n        this.SPI_REG_BASE = 0x5008d000; // SPIMEM1\n        this.SPI_USR_OFFS = 0x18;\n        this.SPI_USR1_OFFS = 0x1c;\n        this.SPI_USR2_OFFS = 0x20;\n        this.SPI_MOSI_DLEN_OFFS = 0x24;\n        this.SPI_MISO_DLEN_OFFS = 0x28;\n        this.SPI_W0_OFFS = 0x58;\n        this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n        this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\n        this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n        this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\n        this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\n        this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\n        this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\n        this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\n        this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n        this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\n        this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\n        this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\n        this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\n        this.PURPOSE_VAL_XTS_AES256_KEY_1 = 2;\n        this.PURPOSE_VAL_XTS_AES256_KEY_2 = 3;\n        this.PURPOSE_VAL_XTS_AES128_KEY = 4;\n        this.SUPPORTS_ENCRYPTED_FLASH = true;\n        this.FLASH_ENCRYPTED_WRITE_ALIGN = 16;\n        this.MEMORY_MAP = [\n            [0x00000000, 0x00010000, \"PADDING\"],\n            [0x40000000, 0x4c000000, \"DROM\"],\n            [0x4ff00000, 0x4ffa0000, \"DRAM\"],\n            [0x4ff00000, 0x4ffa0000, \"BYTE_ACCESSIBLE\"],\n            [0x4fc00000, 0x4fc20000, \"DROM_MASK\"],\n            [0x4fc00000, 0x4fc20000, \"IROM_MASK\"],\n            [0x40000000, 0x4c000000, \"IROM\"],\n            [0x4ff00000, 0x4ffa0000, \"IRAM\"],\n            [0x50108000, 0x50110000, \"RTC_IRAM\"],\n            [0x50108000, 0x50110000, \"RTC_DRAM\"],\n            [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"],\n        ];\n        this.UF2_FAMILY_ID = 0x3d308e94;\n        this.EFUSE_MAX_KEY = 5;\n        this.KEY_PURPOSES = {\n            0: \"USER/EMPTY\",\n            1: \"ECDSA_KEY\",\n            2: \"XTS_AES_256_KEY_1\",\n            3: \"XTS_AES_256_KEY_2\",\n            4: \"XTS_AES_128_KEY\",\n            5: \"HMAC_DOWN_ALL\",\n            6: \"HMAC_DOWN_JTAG\",\n            7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n            8: \"HMAC_UP\",\n            9: \"SECURE_BOOT_DIGEST0\",\n            10: \"SECURE_BOOT_DIGEST1\",\n            11: \"SECURE_BOOT_DIGEST2\",\n            12: \"KM_INIT_KEY\",\n        };\n        this.TEXT_START = ESP32P4_STUB.text_start;\n        this.ENTRY = ESP32P4_STUB.entry;\n        this.DATA_START = ESP32P4_STUB.data_start;\n        this.ROM_DATA = ESP32P4_STUB.data;\n        this.ROM_TEXT = ESP32P4_STUB.text;\n    }\n    async getPkgVersion(loader) {\n        const numWord = 2;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        return (registerValue >> 27) & 0x07;\n    }\n    async getMinorChipVersion(loader) {\n        const numWord = 2;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        return (registerValue >> 0) & 0x0f;\n    }\n    async getMajorChipVersion(loader) {\n        const numWord = 2;\n        const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n        const registerValue = await loader.readReg(addr);\n        return (registerValue >> 4) & 0x03;\n    }\n    async getChipDescription(loader) {\n        const pkgVersion = await this.getPkgVersion(loader);\n        const chipName = pkgVersion === 0 ? \"ESP32-P4\" : \"unknown ESP32-P4\";\n        const majorRev = await this.getMajorChipVersion(loader);\n        const minorRev = await this.getMinorChipVersion(loader);\n        return `${chipName} (revision v${majorRev}.${minorRev})`;\n    }\n    async getChipFeatures(loader) {\n        return [\"High-Performance MCU\"];\n    }\n    async getCrystalFreq(loader) {\n        return 40; // ESP32P4 XTAL is fixed to 40MHz\n    }\n    async getFlashVoltage(loader) {\n        return;\n    }\n    async overrideVddsdio(loader) {\n        loader.debug(\"VDD_SDIO overrides are not supported for ESP32-P4\");\n    }\n    async readMac(loader) {\n        let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n        mac0 = mac0 >>> 0;\n        let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n        mac1 = (mac1 >>> 0) & 0x0000ffff;\n        const mac = new Uint8Array(6);\n        mac[0] = (mac1 >> 8) & 0xff;\n        mac[1] = mac1 & 0xff;\n        mac[2] = (mac0 >> 24) & 0xff;\n        mac[3] = (mac0 >> 16) & 0xff;\n        mac[4] = (mac0 >> 8) & 0xff;\n        mac[5] = mac0 & 0xff;\n        return (this._d2h(mac[0]) +\n            \":\" +\n            this._d2h(mac[1]) +\n            \":\" +\n            this._d2h(mac[2]) +\n            \":\" +\n            this._d2h(mac[3]) +\n            \":\" +\n            this._d2h(mac[4]) +\n            \":\" +\n            this._d2h(mac[5]));\n    }\n    async getFlashCryptConfig(loader) {\n        return; // doesn't exist on ESP32-P4\n    }\n    async getSecureBootEnabled(laoder) {\n        const registerValue = await laoder.readReg(this.EFUSE_SECURE_BOOT_EN_REG);\n        return registerValue & this.EFUSE_SECURE_BOOT_EN_MASK;\n    }\n    async getKeyBlockPurpose(loader, keyBlock) {\n        if (keyBlock < 0 || keyBlock > this.EFUSE_MAX_KEY) {\n            loader.debug(`Valid key block numbers must be in range 0-${this.EFUSE_MAX_KEY}`);\n            return;\n        }\n        const regShiftDictionary = [\n            [this.EFUSE_PURPOSE_KEY0_REG, this.EFUSE_PURPOSE_KEY0_SHIFT],\n            [this.EFUSE_PURPOSE_KEY1_REG, this.EFUSE_PURPOSE_KEY1_SHIFT],\n            [this.EFUSE_PURPOSE_KEY2_REG, this.EFUSE_PURPOSE_KEY2_SHIFT],\n            [this.EFUSE_PURPOSE_KEY3_REG, this.EFUSE_PURPOSE_KEY3_SHIFT],\n            [this.EFUSE_PURPOSE_KEY4_REG, this.EFUSE_PURPOSE_KEY4_SHIFT],\n            [this.EFUSE_PURPOSE_KEY5_REG, this.EFUSE_PURPOSE_KEY5_SHIFT],\n        ];\n        const [reg, shift] = regShiftDictionary[keyBlock];\n        const registerValue = await loader.readReg(reg);\n        return (registerValue >> shift) & 0xf;\n    }\n    async isFlashEncryptionKeyValid(loader) {\n        const purposes = [];\n        for (let i = 0; i <= this.EFUSE_MAX_KEY; i++) {\n            const purpose = await this.getKeyBlockPurpose(loader, i);\n            purposes.push(purpose);\n        }\n        const isXtsAes128Key = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES128_KEY);\n        if (typeof isXtsAes128Key !== undefined) {\n            return true;\n        }\n        const isXtsAes256Key1 = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES256_KEY_1);\n        const isXtsAes256Key2 = purposes.find((p) => p === this.PURPOSE_VAL_XTS_AES256_KEY_2);\n        if (typeof isXtsAes256Key1 !== undefined && typeof isXtsAes256Key2 !== undefined) {\n            return true;\n        }\n        return false;\n    }\n}\n","/**\n * Represents a chip ROM with basic registers field and abstract functions.\n */\nexport class ROM {\n    /**\n     * Get the chip erase size.\n     * @param {number} offset - Offset to start erase.\n     * @param {number} size - Size to erase.\n     * @returns {number} The erase size of the chip as number.\n     */\n    getEraseSize(offset, size) {\n        return size;\n    }\n}\n"],"names":["ESP32ROM","ROM","constructor","super","arguments","this","CHIP_NAME","IMAGE_CHIP_ID","EFUSE_RD_REG_BASE","DR_REG_SYSCON_BASE","UART_CLKDIV_REG","UART_CLKDIV_MASK","UART_DATE_REG_ADDR","XTAL_CLK_DIVIDER","FLASH_SIZES","FLASH_WRITE_SIZE","BOOTLOADER_FLASH_OFFSET","SPI_REG_BASE","SPI_USR_OFFS","SPI_USR1_OFFS","SPI_USR2_OFFS","SPI_W0_OFFS","SPI_MOSI_DLEN_OFFS","SPI_MISO_DLEN_OFFS","TEXT_START","ESP32_STUB","ENTRY","DATA_START","ROM_DATA","ROM_TEXT","readEfuse","loader","offset","addr","debug","readReg","getPkgVersion","word3","pkgVersion","getChipRevision","word5","apbCtlDate","getChipDescription","chipDesc","chipName","chipRevision","rev3","getChipFeatures","features","push","indexOf","codingScheme","getCrystalFreq","uartDiv","etsXtal","transport","baudrate","normXtal","Math","abs","info","_d2h","d","h","toString","length","readMac","mac0","mac1","mac","Uint8Array","ESP32P4ROM","IROM_MAP_START","IROM_MAP_END","DROM_MAP_START","DROM_MAP_END","CHIP_DETECT_MAGIC_VALUE","EFUSE_BASE","EFUSE_BLOCK1_ADDR","MAC_EFUSE_REG","EFUSE_PURPOSE_KEY0_REG","EFUSE_PURPOSE_KEY0_SHIFT","EFUSE_PURPOSE_KEY1_REG","EFUSE_PURPOSE_KEY1_SHIFT","EFUSE_PURPOSE_KEY2_REG","EFUSE_PURPOSE_KEY2_SHIFT","EFUSE_PURPOSE_KEY3_REG","EFUSE_PURPOSE_KEY3_SHIFT","EFUSE_PURPOSE_KEY4_REG","EFUSE_PURPOSE_KEY4_SHIFT","EFUSE_PURPOSE_KEY5_REG","EFUSE_PURPOSE_KEY5_SHIFT","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG","EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT","EFUSE_SPI_BOOT_CRYPT_CNT_REG","EFUSE_SPI_BOOT_CRYPT_CNT_MASK","EFUSE_SECURE_BOOT_EN_REG","EFUSE_SECURE_BOOT_EN_MASK","PURPOSE_VAL_XTS_AES256_KEY_1","PURPOSE_VAL_XTS_AES256_KEY_2","PURPOSE_VAL_XTS_AES128_KEY","SUPPORTS_ENCRYPTED_FLASH","FLASH_ENCRYPTED_WRITE_ALIGN","MEMORY_MAP","UF2_FAMILY_ID","EFUSE_MAX_KEY","KEY_PURPOSES","ESP32P4_STUB","getMinorChipVersion","getMajorChipVersion","majorRev","minorRev","concat","getFlashVoltage","overrideVddsdio","getFlashCryptConfig","getSecureBootEnabled","laoder","getKeyBlockPurpose","keyBlock","regShiftDictionary","reg","shift","isFlashEncryptionKeyValid","purposes","i","purpose","undefined","find","p","isXtsAes256Key1","isXtsAes256Key2","getEraseSize","size"],"sourceRoot":""}